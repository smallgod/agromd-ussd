//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.10 at 01:10:05 PM EAT 
//
package com.agromarketday.ussd.datamodel;

import com.agromarketday.ussd.sharedInterface.Auditable;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.SelectBeforeUpdate;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;
import org.jadira.usertype.dateandtime.joda.PersistentLocalDate;
import org.jadira.usertype.dateandtime.joda.PersistentLocalDateTime;

@TypeDefs({
    @TypeDef(name = "jodalocaldatetime", typeClass = PersistentLocalDateTime.class,
            parameters = {
                @Parameter(value = "UTC", name = "databaseZone"),
                @Parameter(value = "UTC", name = "javaZone")
            }
    ),
    @TypeDef(name = "jodalocaldate", typeClass = PersistentLocalDate.class,
            parameters = {
                @Parameter(value = "UTC", name = "databaseZone"),
                @Parameter(value = "UTC", name = "javaZone")
            }
    )
})
@Entity
@DynamicUpdate(value = true)
@SelectBeforeUpdate(value = true)
@Table(name = "ag_fish_type", uniqueConstraints = @UniqueConstraint(columnNames = {"fish_code"}))

public class AgFishType extends BaseEntity implements Auditable, Serializable {

    private static final long serialVersionUID = -674569956692090564L;

    @Expose
    @SerializedName(value = "id")
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", updatable = false, nullable = false)
    private long id;

    @Expose
    @SerializedName(value = "fish_code")
    @Column(name = "fish_code", nullable = false)
    protected String fishCode; //e.g. 1001

    @Expose
    @SerializedName(value = "node_index")
    @Column(name = "node_index")
    protected int nodeIndex; //e.g. 1  preferred ordering on USSD page
    
    @Expose
    @SerializedName(value = "child_nodes")
    @ManyToMany(fetch = FetchType.EAGER)//LAZY works especially with HQL though with criteria it was throwing the exception  org.hibernate.LazyInitializationException: failed to lazily initialize a collection
    @JoinTable(name = "child_nodes",//EAGER works with criteria but throws the infamous NullPointer exceptin while trying to execute the select query

            joinColumns = {
                @JoinColumn(name = "fish_code", referencedColumnName = "fish_code")

            },
            inverseJoinColumns = {
                @JoinColumn(name = "language_code", referencedColumnName = "language_code")
            }
    )
    @Cascade({CascadeType.ALL})
    private Set<AgFishName> fishNames = new HashSet<>();

    /**
     * no-arg constructor
     *
     */
    public AgFishType() {
    }

    /**
     * Constructor
     *
     * @param nodeName
     * @param nodeIndex
     */
    public AgFishType(String nodeName, int nodeIndex) {
        this.fishCode = nodeName;
        this.nodeIndex = nodeIndex;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the value of the fishCode property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getFishCode() {
        return fishCode;
    }

    /**
     * Sets the value of the fishCode property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setFishCode(String value) {
        this.fishCode = value;
    }

    /**
     * Gets the value of the nodeIndex property.
     *
     */
    public int getNodeIndex() {
        return nodeIndex;
    }
    
    

    /**
     * Sets the value of the nodeIndex property.
     *
     * @param value
     */
    public void setNodeIndex(int value) {
        this.nodeIndex = value;
    }

    @Override
    public String getUsername() {
        return this.getLastModifiedBy();
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 53 * hash + (int) (this.id ^ (this.id >>> 32));
        hash = 53 * hash + Objects.hashCode(this.fishCode);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final AgFishType other = (AgFishType) obj;
        if (this.id != other.getId()) {
            return false;
        }
        return Objects.equals(this.fishCode, other.getFishCode());
    }

    public Set<AgFishName> getFishNames() {
        return fishNames;
    }

    public void setFishNames(Set<AgFishName> fishNames) {
        this.fishNames = fishNames;
    }

}
